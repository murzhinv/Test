import org.eclipse.paho.client.mqttv3.*;
import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;

import javax.net.ssl.*;
import java.io.FileInputStream;
import java.security.KeyStore;
import java.security.cert.Certificate;

public class MqttExample {

    public static void main(String[] args) {
        String broker = "ssl://mqtt.example.com:8883";
        String clientId = "JavaClient";
        String topic = "myTopic";

        try {
            // Load the SSL certificate and key
            String caFilePath = "/path/to/ca.crt";
            String clientCertFilePath = "/path/to/client.crt";
            String clientKeyFilePath = "/path/to/client.key";
            char[] keyPassword = "keyPassword".toCharArray();

            KeyStore keyStore = KeyStore.getInstance("PKCS12");
            keyStore.load(null, null);

            Certificate caCert = loadCertificate(caFilePath);
            keyStore.setCertificateEntry("caCert", caCert);

            Certificate clientCert = loadCertificate(clientCertFilePath);
            keyStore.setCertificateEntry("clientCert", clientCert);

            KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance("SunX509");
            keyManagerFactory.init(keyStore, keyPassword);

            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance("SunX509");
            trustManagerFactory.init(keyStore);

            SSLContext sslContext = SSLContext.getInstance("TLSv1.2");
            sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), null);

            // Create an MQTT client
            MqttClient client = new MqttClient(broker, clientId, new MemoryPersistence());

            // Set SSL socket factory
            SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();
            MqttConnectOptions options = new MqttConnectOptions();
            options.setSocketFactory(sslSocketFactory);

            // Connect to the MQTT broker
            client.connect(options);

            // Subscribe to a topic
            client.subscribe(topic);

            // Publish a message
            String message = "Hello, MQTT!";
            MqttMessage mqttMessage = new MqttMessage(message.getBytes());
            client.publish(topic, mqttMessage);

            // Disconnect from the MQTT broker
            client.disconnect();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static Certificate loadCertificate(String filePath) throws Exception {
        FileInputStream fis = new FileInputStream(filePath);
        CertificateFactory cf = CertificateFactory.getInstance("X.509");
        return cf.generateCertificate(fis);
    }
}


