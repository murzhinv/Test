Certainly! Here's a simple example code for publishing and subscribing to a topic using MQTT in Java:

import org.eclipse.paho.client.mqttv3.*;
import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;

public class MqttExample {

    public static void main(String[] args) {
        String broker = "tcp://mqtt.eclipse.org:1883";
        String clientId = "JavaClient";
        String topic = "myTopic";

        try {
            // Create an MQTT client
            MqttClient client = new MqttClient(broker, clientId, new MemoryPersistence());

            // Set callback for handling messages
            client.setCallback(new MqttCallback() {
                @Override
                public void connectionLost(Throwable cause) {
                    System.out.println("Connection lost!");
                }

                @Override
                public void messageArrived(String topic, MqttMessage message) throws Exception {
                    System.out.println("Received message: " + new String(message.getPayload()));
                }

                @Override
                public void deliveryComplete(IMqttDeliveryToken token) {
                    System.out.println("Message delivered!");
                }
            });

            // Connect to the MQTT broker
            client.connect();

            // Subscribe to a topic
            client.subscribe(topic);

            // Publish a message
            String message = "Hello, MQTT!";
            client.publish(topic, message.getBytes(), 0, false);

            // Wait for a few seconds
            Thread.sleep(2000);

            // Disconnect from the MQTT broker
            client.disconnect();
        } catch (MqttException | InterruptedException e) {
            e.printStackTrace();
        }
    }
}


This example demonstrates how to create an MQTT client, set a callback to handle received messages, connect to the MQTT broker, subscribe to a topic, publish a message, wait for a few seconds, and disconnect from the broker.

In this example, we are using the Eclipse Paho MQTT library, which you can include in your project by adding the appropriate dependency to your build file. You can refer to the previous response for the Maven and Gradle dependency configurations.

Make sure to replace the broker, clientId, and topic variables with the appropriate values for your setup.

Remember to handle exceptions appropriately in your own code and consider implementing additional error handling and error recovery mechanisms as needed.

I hope this helps you with your MQTT Java implementation! Let me know if you have any further questions.
