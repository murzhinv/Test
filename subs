import org.eclipse.paho.client.mqttv3.*;
import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;

import java.io.FileInputStream;
import java.security.KeyStore;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;

import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManagerFactory;

public class Publisher {
    public static void main(String[] args) {
        String topic = "mqtt_topic";
        String content = "Hello from MQTT publisher";
        int qos = 2;
        String broker = "ssl://mqtt.example.com:8883";
        String clientId = "JavaPub";
        String caFilePath = "/path/to/ca.crt";
        String certFilePath = "/path/to/client.crt";
        String keyFilePath = "/path/to/client.key";
        String password = "mqtt_password";

        try {
            MqttClient client = new MqttClient(broker, clientId, new MemoryPersistence());

            // Configure SSL/TLS
            X509Certificate caCert = readCertificate(caFilePath);
            X509Certificate clientCert = readCertificate(certFilePath);
            KeyStore keyStore = KeyStore.getInstance("PKCS12");
            keyStore.load(null, null);
            keyStore.setCertificateEntry("caCert", caCert);
            keyStore.setCertificateEntry("clientCert", clientCert);
            KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
            kmf.init(keyStore, password.toCharArray());

            TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
            tmf.init(keyStore);

            SSLContext sslContext = SSLContext.getInstance("TLSv1.2");
            sslContext.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);
            SSLSocketFactory ssf = sslContext.getSocketFactory();

            MqttConnectOptions options = new MqttConnectOptions();
            options.setSocketFactory(ssf);

            client.connect(options);

            MqttMessage message = new MqttMessage(content.getBytes());
            message.setQos(qos);
            client.publish(topic, message);

            client.disconnect();
        } catch (MqttException me) {
            me.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static X509Certificate readCertificate(String filePath) throws CertificateException {
        try (FileInputStream fis = new FileInputStream(filePath)) {
            CertificateFactory cf = CertificateFactory.getInstance("X.509");
            return (X509Certificate) cf.generateCertificate(fis);
        } catch (Exception e) {
            throw new CertificateException("Failed to read certificate file");
        }
    }
}





import org.eclipse.paho.client.mqttv3.*;
import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;

import java.io.FileInputStream;
import java.security.KeyStore;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;

import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManagerFactory;

public class Subscriber {
    public static void main(String[] args) {
        String topic = "mqtt_topic";
        String broker = "ssl://mqtt.example.com:8883";
        String clientId = "JavaSub";
        String caFilePath = "/path/to/ca.crt";
        String certFilePath = "/path/to/client.crt";
        String keyFilePath = "/path/to/client.key";
        String password = "mqtt_password";

        try {
            MqttClient client = new MqttClient(broker, clientId, new MemoryPersistence());

            // Configure SSL/TLS
            X509Certificate caCert = readCertificate(caFilePath);
            X509Certificate clientCert = readCertificate(certFilePath);
            KeyStore keyStore = KeyStore.getInstance("PKCS12");
            keyStore.load(null, null);
            keyStore.setCertificateEntry("caCert", caCert);
            keyStore.setCertificateEntry("clientCert", clientCert);
            KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
            kmf.init(keyStore, password.toCharArray());

            TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
            tmf.init(keyStore);

            SSLContext sslContext = SSLContext.getInstance("TLSv1.2");
            sslContext.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);
            SSLSocketFactory ssf = sslContext.getSocketFactory();

            MqttConnectOptions options = new MqttConnectOptions();
            options.setSocketFactory(ssf);

            client.connect(options);

            client.subscribe(topic, new IMqttMessageListener() {
                @Override
                public void messageArrived(String topic, MqttMessage message) throws Exception {
                    System.out.println("Received message: " + new String(message.getPayload()));
                }
            });

            client.disconnect();
        } catch (MqttException me) {
            me.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static X509Certificate readCertificate(String filePath) throws CertificateException {
        try (FileInputStream fis = new FileInputStream(filePath)) {
            CertificateFactory cf = CertificateFactory.getInstance("X.509");
            return (X509Certificate) cf.generateCertificate(fis);
        } catch (Exception e) {
            throw new CertificateException("Failed to read certificate file");
        }
    }
}






public class Main {
    public static void main(String[] args) {
        Publisher.main(null);
        Subscriber.main(null);
    }
}
