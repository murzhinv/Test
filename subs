import org.eclipse.paho.client.mqttv3.*;

public class Publisher {
    private final String brokerUrl;
    private final String clientId;
    private final MqttClient client;

    public Publisher(String brokerUrl, String clientId, String caCertFile, String clientCertFile, String clientKeyFile) throws MqttException, MqttSecurityException {
        this.brokerUrl = brokerUrl;
        this.clientId = clientId;
        MqttConnectOptions options = new MqttConnectOptions();
        options.setCleanSession(true);
        options.setSocketFactory(MqttSSLUtil.getSocketFactory(caCertFile, clientCertFile, clientKeyFile));
        client = new MqttClient(brokerUrl, clientId, null);
        client.connect(options);
    }

    public void publish(String topic, String message) throws MqttException {
        MqttMessage mqttMessage = new MqttMessage(message.getBytes());
        client.publish(topic, mqttMessage);
    }
}

class Subscriber implements MqttCallback {
    private final String brokerUrl;
    private final String clientId;
    private final MqttClient client;

    public Subscriber(String brokerUrl, String clientId, String caCertFile, String clientCertFile, String clientKeyFile) throws MqttException, MqttSecurityException {
        this.brokerUrl = brokerUrl;
        this.clientId = clientId;
        MqttConnectOptions options = new MqttConnectOptions();
        options.setCleanSession(true);
        options.setSocketFactory(MqttSSLUtil.getSocketFactory(caCertFile, clientCertFile, clientKeyFile));
        client = new MqttClient(brokerUrl, clientId, null);
        client.connect(options);
    }

    public void subscribe(String topic) throws MqttException {
        client.setCallback(this);
        client.subscribe(topic);
    }

    @Override
    public void connectionLost(Throwable throwable) {
        throwable.printStackTrace();
    }

    @Override
    public void messageArrived(String topic, MqttMessage mqttMessage) throws Exception {
        String message = new String(mqttMessage.getPayload());
        System.out.println("Received message on topic: " + topic + ", message: " + message);
    }

    @Override
    public void deliveryComplete(IMqttDeliveryToken token) {
    }
}

class MqttSSLUtil {
    public static SSLSocketFactory getSocketFactory(String caCertFile, String clientCertFile, String clientKeyFile) {
        try {
            KeyStore caCertStore = KeyStore.getInstance("PKCS12");
            caCertStore.load(new FileInputStream(caCertFile), null);
            
            CertificateFactory certFactory = CertificateFactory.getInstance("X.509");
            FileInputStream clientCertIn = new FileInputStream(clientCertFile);
            X509Certificate clientCert = (X509Certificate) certFactory.generateCertificate(clientCertIn);
            clientCertIn.close();
            
            FileInputStream clientKeyIn = new FileInputStream(clientKeyFile);
            KeyFactory keyFactory = KeyFactory.getInstance("RSA");
            PrivateKey clientKey = keyFactory.generatePrivate(new PKCS8EncodedKeySpec(clientKeyIn.readAllBytes()));
            clientKeyIn.close();

            KeyStore clientCertStore = KeyStore.getInstance("PKCS12");
            clientCertStore.load(null, null);
            clientCertStore.setCertificateEntry(clientCert.getSubjectX500Principal().getName(), clientCert);
            clientCertStore.setKeyEntry(clientCert.getSubjectX500Principal().getName(), clientKey, null, new Certificate[]{clientCert});

            KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
            keyManagerFactory.init(clientCertStore, null);

            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
            trustManagerFactory.init(caCertStore);

            SSLContext sslContext = SSLContext.getInstance("TLSv1.2");
            sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), null);

            return sslContext.getSocketFactory();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
}






public class Main {
    public static void main(String[] args) {
        try {
            String brokerUrl = "ssl://mqtt.example.com:8883";
            String clientId = "java-mqtt-client";
            String caCertFile = "/path/to/ca_cert.p12";
            String clientCertFile = "/path/to/client_cert.p12";
            String clientKeyFile = "/path/to/client_key.key";

            Publisher publisher = new Publisher(brokerUrl, clientId, caCertFile, clientCertFile, clientKeyFile);
            publisher.publish("topic/test", "Hello, MQTT!");

            Subscriber subscriber = new Subscriber(brokerUrl, clientId, caCertFile, clientCertFile, clientKeyFile);
            subscriber.subscribe("topic/test");
        } catch (MqttException | MqttSecurityException e) {
            e.printStackTrace();
        }
    }
}
