import org.eclipse.paho.client.mqttv3.*;
import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;

import javax.net.ssl.SSLSocketFactory;

public class MQTTSubscriber {
    private String brokerUrl;
    private String clientId;
    private String username;
    private String password;
    private String topic;
    private MqttClient mqttClient;

    public MQTTSubscriber(String brokerUrl, String clientId, String username, String password, String topic) {
        this.brokerUrl = brokerUrl;
        this.clientId = clientId;
        this.username = username;
        this.password = password;
        this.topic = topic;
    }

    public void connect() {
        try {
            mqttClient = new MqttClient(brokerUrl, clientId, new MemoryPersistence());
            MqttConnectOptions options = new MqttConnectOptions();
            options.setUserName(username);
            options.setPassword(password.toCharArray());
            options.setSocketFactory(SSLSocketFactory.getDefault());
            mqttClient.connect(options);

            mqttClient.setCallback(new MqttCallback() {
                @Override
                public void connectionLost(Throwable throwable) {
                    // Обработка потери соединения
                }

                @Override
                public void messageArrived(String s, MqttMessage mqttMessage) throws Exception {
                    // Обработка полученного сообщения
                    System.out.println("Received message: " + new String(mqttMessage.getPayload()));
                }

                @Override
                public void deliveryComplete(IMqttDeliveryToken iMqttDeliveryToken) {
                    // Обработка успешной доставки сообщения
                }
            });

            mqttClient.subscribe(topic);
        } catch (MqttException e) {
            e.printStackTrace();
        }
    }

    public void disconnect() {
        try {
            mqttClient.disconnect();
        } catch (MqttException e) {
            e.printStackTrace();
        }
    }
}


Вы можете использовать этот класс следующим образом:

public class Main {
    public static void main(String[] args) {
        String brokerUrl = "ssl://mqtt.example.com:8883";
        String clientId = "client1";
        String username = "user";
        String password = "password";
        String topic = "test/topic";

        // Создаем и подключаемся к MQTT-брокеру для получения сообщений
        MQTTSubscriber mqttSubscriber = new MQTTSubscriber(brokerUrl, clientId, username, password, topic);
        mqttSubscriber.connect();

        // Ожидаем получение сообщений в течение 10 секунд
        try {
            Thread.sleep(10000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // Отключаемся от MQTT-брокера
        mqttSubscriber.disconnect();
    }
}
