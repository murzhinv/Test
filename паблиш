Конечно! Вот пример тестовой программы на Java для тестирования OPC UA сервера:

import org.eclipse.milo.opcua.sdk.client.OpcUaClient;
import org.eclipse.milo.opcua.sdk.client.api.subscriptions.UaSubscription;
import org.eclipse.milo.opcua.stack.core.AttributeId;
import org.eclipse.milo.opcua.stack.core.Identifiers;
import org.eclipse.milo.opcua.stack.core.types.builtin.DataValue;
import org.eclipse.milo.opcua.stack.core.types.builtin.NodeId;
import org.eclipse.milo.opcua.stack.core.types.builtin.unsigned.UInteger;
import org.eclipse.milo.opcua.stack.core.types.enumerated.TimestampsToReturn;
import org.eclipse.milo.opcua.stack.core.types.structured.ReadResponse;
import org.eclipse.milo.opcua.stack.core.types.structured.WriteResponse;

import java.util.concurrent.CompletableFuture;

public class OpcUaClientTest {

    public static void main(String[] args) throws Exception {

        // Create a new OPC UA client
        OpcUaClient client = OpcUaClient.create("opc.tcp://localhost:4840");

        // Connect to the OPC UA server
        client.connect().get();

        // Read a variable value
        NodeId nodeId = new NodeId(2, "MyVariable");
        AttributeId attributeId = AttributeId.Value;

        CompletableFuture<ReadResponse> readFuture = client.readAttribute(
                0.0, TimestampsToReturn.Both, nodeId, attributeId);

        ReadResponse readResponse = readFuture.get();

        if (readResponse.getResults()[0].isGood()) {
            DataValue value = readResponse.getResults()[0].getValue();
            System.out.println("Read value: " + value.getValue().toString());
        } else {
            System.out.println("Read failed: " + readResponse.getResults()[0].getStatusCode());
        }

        // Write a variable value
        NodeId nodeId = new NodeId(2, "MyVariable");
        AttributeId attributeId = AttributeId.Value;
        DataValue writeValue = new DataValue(new Variant(42));

        CompletableFuture<WriteResponse> writeFuture = client.writeAttribute(
                0.0, nodeId, attributeId, writeValue);

        WriteResponse writeResponse = writeFuture.get();

        if (writeResponse.getResults()[0].isGood()) {
            System.out.println("Write successful");
        } else {
            System.out.println("Write failed: " + writeResponse.getResults()[0].getStatusCode());
        }

        // Subscribe to a variable value change
        NodeId nodeId = new NodeId(2, "MyVariable");
        AttributeId attributeId = AttributeId.Value;

        UaSubscription subscription = client.getSubscriptionManager().createSubscription(1000.0).get();

        CompletableFuture<StatusCode> subscriptionFuture = subscription.subscribe(
                new MonitoringParameters(
                        subscription.nextClientHandle(),
                        1000.0,
                        null,
                        UInteger.valueOf(10),
                        true
                ),
                new DataChangeHandler() {
                    @Override
                    public void onDataChange(Subscription subscription, MonitoredItem item, DataValue value) {
                        System.out.println("Value changed: " + value.getValue().toString());
                    }
                }
        );

        StatusCode subscriptionStatusCode = subscriptionFuture.get();

        if (subscriptionStatusCode.isGood()) {
            System.out.println("Subscription successful");
        } else {
            System.out.println("Subscription failed: " + subscriptionStatusCode);
        }

        // Disconnect from the OPC UA server
        client.disconnect().get();
    }
}


Обратите внимание, что в примере используется библиотека Eclipse Milo для общения с OPC UA сервером. Вам может потребоваться добавить зависимость на эту библиотеку в вашем проекте.

Программа подключается к OPC UA серверу, считывает и записывает значения переменных, а также подписывается на изменения значений переменных. Вы можете настроить соответствующие NodeId и AttributeId для ваших переменных.